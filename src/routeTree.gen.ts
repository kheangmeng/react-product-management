/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminProductsIndexRouteImport } from './routes/admin/products/index'
import { Route as AdminProductsAddRouteImport } from './routes/admin/products/add'
import { Route as AdminProductsProductIdIndexRouteImport } from './routes/admin/products/$productId/index'
import { Route as AdminProductsProductIdEditRouteImport } from './routes/admin/products/$productId/edit'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProductsIndexRoute = AdminProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminProductsAddRoute = AdminProductsAddRouteImport.update({
  id: '/products/add',
  path: '/products/add',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminProductsProductIdIndexRoute =
  AdminProductsProductIdIndexRouteImport.update({
    id: '/products/$productId/',
    path: '/products/$productId/',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminProductsProductIdEditRoute =
  AdminProductsProductIdEditRouteImport.update({
    id: '/products/$productId/edit',
    path: '/products/$productId/edit',
    getParentRoute: () => AdminRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/products/add': typeof AdminProductsAddRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/products/$productId/edit': typeof AdminProductsProductIdEditRoute
  '/admin/products/$productId': typeof AdminProductsProductIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/products/add': typeof AdminProductsAddRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/products/$productId/edit': typeof AdminProductsProductIdEditRoute
  '/admin/products/$productId': typeof AdminProductsProductIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/products/add': typeof AdminProductsAddRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/products/$productId/edit': typeof AdminProductsProductIdEditRoute
  '/admin/products/$productId/': typeof AdminProductsProductIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/products/add'
    | '/admin/products'
    | '/admin/products/$productId/edit'
    | '/admin/products/$productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/products/add'
    | '/admin/products'
    | '/admin/products/$productId/edit'
    | '/admin/products/$productId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/products/add'
    | '/admin/products/'
    | '/admin/products/$productId/edit'
    | '/admin/products/$productId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products/add': {
      id: '/admin/products/add'
      path: '/products/add'
      fullPath: '/admin/products/add'
      preLoaderRoute: typeof AdminProductsAddRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products/$productId/': {
      id: '/admin/products/$productId/'
      path: '/products/$productId'
      fullPath: '/admin/products/$productId'
      preLoaderRoute: typeof AdminProductsProductIdIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products/$productId/edit': {
      id: '/admin/products/$productId/edit'
      path: '/products/$productId/edit'
      fullPath: '/admin/products/$productId/edit'
      preLoaderRoute: typeof AdminProductsProductIdEditRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminProductsAddRoute: typeof AdminProductsAddRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
  AdminProductsProductIdEditRoute: typeof AdminProductsProductIdEditRoute
  AdminProductsProductIdIndexRoute: typeof AdminProductsProductIdIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminProductsAddRoute: AdminProductsAddRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
  AdminProductsProductIdEditRoute: AdminProductsProductIdEditRoute,
  AdminProductsProductIdIndexRoute: AdminProductsProductIdIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
